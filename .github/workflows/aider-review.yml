name: Aider PR Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Aider and GitHub CLI
        run: |
          python -m pip install --upgrade pip
          pip install aider-chat openai

      - name: Configure GitHub CLI
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Get PR diff and create review
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the diff
          git fetch origin ${{ github.base_ref }}
          git diff origin/${{ github.base_ref }}...HEAD > pr_diff.txt
          
          # Create a message file for aider
          cat > message.txt << 'EOF'
          Please review this PR diff and provide feedback in the following JSON format:
          {
            "review": {
              "code_quality": ["list of code quality observations"],
              "potential_bugs": ["list of potential bugs"],
              "improvements": ["list of suggested improvements"],
              "security": ["list of security considerations"]
            },
            "merge_decision": "YES/NO - no reason"
          }
          EOF
          cat pr_diff.txt >> message.txt
          
          # Run aider
          aider --4o \
                --message-file message.txt \
                --no-git \
                --no-auto-commits \
                --yes-always \
                --no-pretty \
                --no-stream \
                --no-check-update > raw_review.txt

          # Extract and format the review using Python
          python3 - << 'EOF' > formatted_review.txt
          import json
          import re

          with open('raw_review.txt', 'r') as f:
              content = f.read()

          # Find the JSON content
          json_match = re.search(r'\{[\s\S]*\}', content)
          if json_match:
              try:
                  review_data = json.loads(json_match.group())
                  
                  # Format the review
                  output = ["## AI Code Review\n```"]
                  
                  # Code Quality
                  output.append("\n### Code Quality")
                  for item in review_data["review"]["code_quality"]:
                      output.append(f"- {item}")
                  
                  # Potential Bugs
                  output.append("\n### Potential Bugs")
                  for item in review_data["review"]["potential_bugs"]:
                      output.append(f"- {item}")
                  
                  # Improvements
                  output.append("\n### Suggested Improvements")
                  for item in review_data["review"]["improvements"]:
                      output.append(f"- {item}")
                  
                  # Security
                  output.append("\n### Security Considerations")
                  for item in review_data["review"]["security"]:
                      output.append(f"- {item}")
                  
                  # Token information (if available)
                  token_match = re.search(r'Tokens:.*session\.', content)
                  if token_match:
                      output.append(f"\n\nToken Information:\n{token_match.group()}")
                  
                  # Merge decision
                  output.append("\n---\nMerge Decision:")
                  output.append(review_data["merge_decision"])
                  
                  output.append("```")
                  
                  print("\n".join(output))
              except json.JSONDecodeError:
                  print("## AI Code Review\n```\nError: Could not parse JSON response\n```")
          else:
              print("## AI Code Review\n```\nError: No JSON content found in response\n```")
          EOF
          
          # Post the review as a PR comment
          gh pr comment ${{ github.event.pull_request.number }} --body-file formatted_review.txt
